From 86b026c44f2df6af558a0941ffbeeda00627bb2e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jari=20H=C3=A4m=C3=A4l=C3=A4inen?= <nuumiofi@gmail.com>
Date: Sat, 25 Jul 2020 12:14:35 +0300
Subject: [PATCH] rockpro64 dts / rk pcie: add configurable delay before pcie
 bus scan

Combined changes to DTS and Rockchip PCIe to add configurable delay before PCIe
bus scan. Delay is needed to workaround crashes with some PCIe devices, like
LSI SAS2008 controller in my case. 1000 ms delay seems to be stable for me.

The exact reason for crashes is unknown to me. Crashes have following kind of
call trace:
 rockchip_pcie_rd_conf+0x188/0x240
 pci_bus_read_config_dword+0xa0/0x138
 pci_bus_generic_read_dev_vendor_id+0x2c/0x1a0
 pci_bus_read_dev_vendor_id+0x48/0x68
 pci_scan_single_device+0x78/0xf8
 pci_scan_slot+0x34/0x128
 pci_scan_child_bus_extend+0x54/0x350
 pci_scan_bridge_extend+0x2fc/0x598
 pci_scan_child_bus_extend+0x204/0x350
 pci_scan_root_bus_bridge+0x58/0xe8
 rockchip_pcie_probe+0x3dc/0x5c0
 platform_drv_probe+0x50/0xa0
 really_probe+0x27c/0x468
 driver_probe_device+0x12c/0x148
 device_driver_attach+0x6c/0x90
 __driver_attach+0xb0/0x160
 bus_for_each_dev+0x74/0xc8
 driver_attach+0x20/0x28
 bus_add_driver+0x154/0x238
 driver_register+0x60/0x110
 __platform_driver_register+0x40/0x48
 rockchip_pcie_driver_init+0x18/0x20
 do_one_initcall+0x5c/0x1b0
 kernel_init_freeable+0x22c/0x2c0
 kernel_init+0x10/0x100
 ret_from_fork+0x10/0x1c
---
 Documentation/admin-guide/kernel-parameters.txt |  8 ++++++++
 .../boot/dts/rockchip/rk3399-rockpro64.dtsi     |  1 +
 drivers/pci/controller/pcie-rockchip-host.c     | 17 +++++++++++++++++
 drivers/pci/controller/pcie-rockchip.c          |  8 ++++++++
 drivers/pci/controller/pcie-rockchip.h          |  1 +
 5 files changed, 35 insertions(+)

diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index 7bc83f3d9bdfe..0e7222aa3fbe6 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -3694,6 +3694,14 @@
 		nomsi	Do not use MSI for native PCIe PME signaling (this makes
 			all PCIe root ports use INTx for all services).
 
+	pcie_rockchip_host.bus_scan_delay=	[PCIE] Delay in ms before
+			scanning PCIe bus in Rockchip PCIe host driver. Some PCIe
+			cards seem to need delays that can be several hundred ms.
+			If set to greater than or equal to 0 this parameter will
+			override delay that can be set in device tree.
+			Values less than 0 mean that this parameter is ignored.
+			default=-1
+
 	pcmv=		[HW,PCMCIA] BadgePAD 4
 
 	pd_ignore_unused
diff --git a/arch/arm64/boot/dts/rockchip/rk3399-rockpro64.dtsi b/arch/arm64/boot/dts/rockchip/rk3399-rockpro64.dtsi
index 9bca258012608..1ad940082cea5 100644
--- a/arch/arm64/boot/dts/rockchip/rk3399-rockpro64.dtsi
+++ b/arch/arm64/boot/dts/rockchip/rk3399-rockpro64.dtsi
@@ -530,6 +530,7 @@
 	pinctrl-0 = <&pcie_perst>;
 	vpcie12v-supply = <&vcc12v_dcin>;
 	vpcie3v3-supply = <&vcc3v3_pcie>;
+	bus-scan-delay-ms = <1000>;
 	status = "okay";
 };
 
diff --git a/drivers/pci/controller/pcie-rockchip-host.c b/drivers/pci/controller/pcie-rockchip-host.c
index 94af6f5828a3d..75b9b6ff7b97a 100644
--- a/drivers/pci/controller/pcie-rockchip-host.c
+++ b/drivers/pci/controller/pcie-rockchip-host.c
@@ -24,6 +24,7 @@
 #include <linux/kernel.h>
 #include <linux/mfd/syscon.h>
 #include <linux/module.h>
+#include <linux/moduleparam.h>
 #include <linux/of_address.h>
 #include <linux/of_device.h>
 #include <linux/of_pci.h>
@@ -39,6 +40,9 @@
 #include "../pci.h"
 #include "pcie-rockchip.h"
 
+static int bus_scan_delay = -1;
+module_param_named(bus_scan_delay, bus_scan_delay, int, S_IRUGO);
+
 static void rockchip_pcie_enable_bw_int(struct rockchip_pcie *rockchip)
 {
 	u32 status;
@@ -953,6 +957,7 @@ static int rockchip_pcie_probe(struct platform_device *pdev)
 	struct pci_host_bridge *bridge;
 	struct resource *bus_res;
 	int err;
+	u32 delay = 0;
 
 	if (!dev->of_node)
 		return -ENODEV;
@@ -1015,6 +1020,18 @@ static int rockchip_pcie_probe(struct platform_device *pdev)
 	bridge->map_irq = of_irq_parse_and_map_pci;
 	bridge->swizzle_irq = pci_common_swizzle;
 
+	/* Prefer command-line param over device tree */
+	if (bus_scan_delay > 0) {
+		delay = bus_scan_delay;
+		dev_info(dev, "wait %u ms (from command-line) before bus scan\n", delay);
+	} else if (rockchip->bus_scan_delay > 0 && bus_scan_delay < 0) {
+		delay = rockchip->bus_scan_delay;
+		dev_info(dev, "wait %u ms (from device tree) before bus scan\n", delay);
+	}
+	if (delay > 0) {
+		msleep(delay);
+	}
+
 	err = pci_scan_root_bus_bridge(bridge);
 	if (err < 0)
 		goto err_remove_irq_domain;
diff --git a/drivers/pci/controller/pcie-rockchip.c b/drivers/pci/controller/pcie-rockchip.c
index c53d1322a3d6c..f518fd00fbadd 100644
--- a/drivers/pci/controller/pcie-rockchip.c
+++ b/drivers/pci/controller/pcie-rockchip.c
@@ -150,6 +150,14 @@ int rockchip_pcie_parse_dt(struct rockchip_pcie *rockchip)
 		return PTR_ERR(rockchip->clk_pcie_pm);
 	}
 
+	err = of_property_read_u32(node, "bus-scan-delay-ms", &rockchip->bus_scan_delay);
+	if (err) {
+		dev_info(dev, "no bus-scan-delay-ms in device tree, default 0 ms\n");
+		rockchip->bus_scan_delay = 0;
+	} else {
+		dev_info(dev, "bus-scan-delay-ms in device tree is %u ms\n", rockchip->bus_scan_delay);
+	}
+
 	return 0;
 }
 EXPORT_SYMBOL_GPL(rockchip_pcie_parse_dt);
diff --git a/drivers/pci/controller/pcie-rockchip.h b/drivers/pci/controller/pcie-rockchip.h
index d90dfb3545732..32f0a4b5ebe67 100644
--- a/drivers/pci/controller/pcie-rockchip.h
+++ b/drivers/pci/controller/pcie-rockchip.h
@@ -308,6 +308,7 @@ struct rockchip_pcie {
 	phys_addr_t msg_bus_addr;
 	bool is_rc;
 	struct resource *mem_res;
+	u32	bus_scan_delay;
 };
 
 static u32 rockchip_pcie_read(struct rockchip_pcie *rockchip, u32 reg)
